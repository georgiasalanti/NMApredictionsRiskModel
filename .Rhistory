adarr_OBJREL_02year_ds <- sapply(1:nsubjects, function(i) subset(adarr_OBJREL,subset = adarr_OBJREL$USUBJID == as.character(usubjectID[i]) & adarr_OBJREL$AVISIT=='Overall 0-2 Years'),
simplify = F)
# 3.2 I check the nrow() of each data frame, if nrow==0 then there is no assessment for 'Overall 0-2 Years'
# If not (nrow==1), then I check if the patient relapsed or not ('SUBJRR' differ from zero or not).
RELAPSE02Year <- 1:nsubjects
for (i in 1:nsubjects) {
if(nrow(adarr_OBJREL_02year_ds[[i]]) == 0){
RELAPSE02Year[i] <- NA
}else{
if(adarr_OBJREL_02year_ds[[i]]$AVAL>0){
RELAPSE02Year[i] <- 1
}else{
RELAPSE02Year[i] <- 0
}
}
}
## 3.3 Add the two dummy variables (RELAPSE01Year and RELAPSE02Year) to ADSL dataset now it is adsl01
adsl01 <- adsl
adsl01$RELAPSE1year <- RELAPSE01Year
adsl01$RELAPSE2year <- RELAPSE02Year
return(list(adsl01=adsl01,adarr_OBJREL=adarr_OBJREL))
}
numericalDataRisk.fun=function(dataset){
library(car)
####recode treatment names####
dataset$TRT01A<-as.numeric(dataset$TRT01A)
dataset$TRT01A<-recode(dataset$TRT01A, "1='Avonex'; 2='Dimethyl fumarate';3='Dimethyl fumarate'; 4='Peginterferon Beta-1a';5='Peginterferon Beta-1a';6='Glatiramer acetate';7='Natalizumab';8='Natalizumab + Avonex';9='Placebo';10='Avonex'")
##################################HANDLING VARIABLES##############################################
keep<-c("STUDYID","USUBJID","AGE","SEX","RACE","TRT01A","HEIGHTBL","WEIGHTBL","EDSSBL","ONSYRS","DIAGYRS",
"DOMIHAND","RLPS3YR","RLPS1YR","TRELMOS", "MCDBL","PRMSGR","REGION","T25FWABL","NHPTMBL","NHPTDHBL","NHPTNHBL",
"PASATABL","MSFCBL","GDLESBL","T2VOLBL","T1VOLBL","BVZBL","VFT100BL","VFT25BL",
"VFT125BL","SFPCSBL","SFMCSBL","VISUALBL","BRAINBL","PYRAMIBL","SENSORBL","BOWLBLBL",
"CEREBRBL","DISTWKBL","T25FWP1","NHPTMP1","NHPTDHP1","NHPTNHP1","PASATP1","T25FWPC","NHPTMPC","NHPTDHPC",
"NHPTNHPC","PASATPC","RELAPSE1year","RELAPSE2year")
MSrelapse<-dataset[,keep]
##################################HANDLING VARIABLES############################
###########################RECODE VARIABLES to numeric values############################
MSrelapse$SEX<-recode(MSrelapse$SEX, "'M'=1; 'F'=0")
MSrelapse$RACE<-recode(MSrelapse$RACE, "'WHITE'=1; 'NON-WHITE'=0")
MSrelapse$DOMIHAND<-recode(MSrelapse$DOMIHAND, "'Left'=1;'LEFT'=1;  'Right'=0; 'RIGHT'=0;" )
MSrelapse$DOMIHAND[which(MSrelapse$DOMIHAND=="")]<-NA
MSrelapse$REGION<-recode(MSrelapse$REGION, "'Eastern Europe'=1;'India'=2;  'North America'=3; 'ROW'=4;'Western Europe'=5 " )
mylevels <- c("< 100 METRES",
">= 100 METRES AND < 200 METRES",
">= 200 METRES AND < 300 METRES",
">= 300 METRES AND < 500 METRES",
">= 500 METRES")
MSrelapse$DISTWKBL<- as.numeric(factor(MSrelapse$DISTWKBL, levels=mylevels))
MSrelapse$DISTWKBL<-as.factor(MSrelapse$DISTWKBL)
######delete variable RLPS1Y (all the information included in RLPS3Y)
MSrelapse$RLPS1YR<-NULL
#remove Sentinel study - Not included in AD data - Combination of therapies
MSrelapse$PRMSGR<-as.factor(MSrelapse$PRMSGR)
MSrelapse$SENSORBL<-as.factor(MSrelapse$SENSORBL)
MSrelapse<-MSrelapse[which(MSrelapse$STUDYID!="C-1802"),]
return(MSrelapse)
}
mydatapath="C:/Users/kc19o338/Desktop/HTx/data/IPD data from 6 Biogen trials"
### load data
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
adsl01<-cleanBIOGENtrials$adsl01
### Select variables that I need and recode them in numerical values (e.g. Male=1, Female=0)
MSrelapse<-numericalDataRisk.fun(adsl01)
####selection of variables based on n half RCTs
####because of the "for" loop it takes a lot of time and is only needed for
####the selection of variables in cross Internal Risk score
####its results are integrated into Cross internal risk score
CrossSelection2years.Lasso.fun(100)
dataset<-MSrelapse
CrossSelection2years.Lasso.fun=function(dataset,n){
library(glmnet)
library(Hmisc)
####################random half RCTs from studies###############################
for (i in 1:n) {
Advance<-dataset[which(dataset$STUDYID=="105MS301"),]
Advance.risk<-Advance[sample(nrow(Advance), nrow(Advance)/2),]
todrop<-c("STUDYID","USUBJID","RELAPSE1year")
Advance.risk<-Advance.risk[ , !(names(Advance.risk) %in% todrop)]
Define<-dataset[which(dataset$STUDYID=="109MS301"),]
Define.risk<-Define[sample(nrow(Define), nrow(Define)/2),]
Define.risk<-Define.risk[ , !(names(Define.risk) %in% todrop)]
Confirm<-dataset[which(dataset$STUDYID=="C-1801"),]
Confirm.risk<-Confirm[sample(nrow(Confirm), nrow(Confirm)/2),]
Confirm.risk<-Confirm.risk[ , !(names(Confirm.risk) %in% todrop)]
Affirm<-dataset[which(dataset$STUDYID=="C-1802"),]
Affirm.risk<-Affirm[sample(nrow(Affirm), nrow(Affirm)/2),]
Affirm.risk<-Affirm.risk[ , !(names(Affirm.risk) %in% todrop)]
Mscrg<-dataset[which(dataset$STUDYID=="NS26321"),]
Mscrg.risk<-Mscrg[sample(nrow(Mscrg), nrow(Mscrg)/2),]
Mscrg.risk<-Mscrg.risk[ , !(names(Mscrg.risk) %in% todrop)]
##all half studies together
mrg<-rbind(Advance.risk,Define.risk,Confirm.risk,Affirm.risk,Mscrg.risk)
#####################LASSO preparation####################
###blinded to treatment so drop variable TRT01A
todrop<-c("TRT01A")
mrg.both<-mrg[ , !(names(mrg) %in% todrop)]
### delete NA values (LASSO requierement)
mrg.both<-na.omit(mrg.both)
#### model matrix needed for LASSO
half.matrix<-model.matrix(mrg.both$RELAPSE2year~.,data=mrg.both)
half.matrix<-na.omit(half.matrix)
#################################LASSO################################
######################################################################
##10 cross validations
cv.fit.half<-cv.glmnet(x=half.matrix,y=mrg.both$RELAPSE2year,family="binomial")
### LASSO coefficients
cv.coef.half<-coef(cv.fit.half,s="lambda.1se")
####RESULTS
### non zero coefficients lead to selected variables
cv.pf.em.half<-rownames(cv.coef.half)[as.numeric(cv.coef.half)!=0]
return(print(cv.pf.em.half))
}
}
CrossSelection2years.Lasso.fun(MSrelapse,100)
####################random half RCTs from studies###############################
for (i in 1:n) {
Advance<-dataset[which(dataset$STUDYID=="105MS301"),]
Advance.risk<-Advance[sample(nrow(Advance), nrow(Advance)/2),]
todrop<-c("STUDYID","USUBJID","RELAPSE1year")
Advance.risk<-Advance.risk[ , !(names(Advance.risk) %in% todrop)]
Define<-dataset[which(dataset$STUDYID=="109MS301"),]
Define.risk<-Define[sample(nrow(Define), nrow(Define)/2),]
Define.risk<-Define.risk[ , !(names(Define.risk) %in% todrop)]
Confirm<-dataset[which(dataset$STUDYID=="C-1801"),]
Confirm.risk<-Confirm[sample(nrow(Confirm), nrow(Confirm)/2),]
Confirm.risk<-Confirm.risk[ , !(names(Confirm.risk) %in% todrop)]
Affirm<-dataset[which(dataset$STUDYID=="C-1802"),]
Affirm.risk<-Affirm[sample(nrow(Affirm), nrow(Affirm)/2),]
Affirm.risk<-Affirm.risk[ , !(names(Affirm.risk) %in% todrop)]
Mscrg<-dataset[which(dataset$STUDYID=="NS26321"),]
Mscrg.risk<-Mscrg[sample(nrow(Mscrg), nrow(Mscrg)/2),]
Mscrg.risk<-Mscrg.risk[ , !(names(Mscrg.risk) %in% todrop)]
##all half studies together
mrg<-rbind(Advance.risk,Define.risk,Confirm.risk,Affirm.risk,Mscrg.risk)
#####################LASSO preparation####################
###blinded to treatment so drop variable TRT01A
todrop<-c("TRT01A")
mrg.both<-mrg[ , !(names(mrg) %in% todrop)]
### delete NA values (LASSO requierement)
mrg.both<-na.omit(mrg.both)
#### model matrix needed for LASSO
half.matrix<-model.matrix(mrg.both$RELAPSE2year~.,data=mrg.both)
half.matrix<-na.omit(half.matrix)
#################################LASSO################################
######################################################################
##10 cross validations
cv.fit.half<-cv.glmnet(x=half.matrix,y=mrg.both$RELAPSE2year,family="binomial")
### LASSO coefficients
cv.coef.half<-coef(cv.fit.half,s="lambda.1se")
####RESULTS
### non zero coefficients lead to selected variables
cv.pf.em.half<-rownames(cv.coef.half)[as.numeric(cv.coef.half)!=0]
print(cv.pf.em.half)
}
for (i in 1:100) {
Advance<-dataset[which(dataset$STUDYID=="105MS301"),]
Advance.risk<-Advance[sample(nrow(Advance), nrow(Advance)/2),]
todrop<-c("STUDYID","USUBJID","RELAPSE1year")
Advance.risk<-Advance.risk[ , !(names(Advance.risk) %in% todrop)]
Define<-dataset[which(dataset$STUDYID=="109MS301"),]
Define.risk<-Define[sample(nrow(Define), nrow(Define)/2),]
Define.risk<-Define.risk[ , !(names(Define.risk) %in% todrop)]
Confirm<-dataset[which(dataset$STUDYID=="C-1801"),]
Confirm.risk<-Confirm[sample(nrow(Confirm), nrow(Confirm)/2),]
Confirm.risk<-Confirm.risk[ , !(names(Confirm.risk) %in% todrop)]
Affirm<-dataset[which(dataset$STUDYID=="C-1802"),]
Affirm.risk<-Affirm[sample(nrow(Affirm), nrow(Affirm)/2),]
Affirm.risk<-Affirm.risk[ , !(names(Affirm.risk) %in% todrop)]
Mscrg<-dataset[which(dataset$STUDYID=="NS26321"),]
Mscrg.risk<-Mscrg[sample(nrow(Mscrg), nrow(Mscrg)/2),]
Mscrg.risk<-Mscrg.risk[ , !(names(Mscrg.risk) %in% todrop)]
##all half studies together
mrg<-rbind(Advance.risk,Define.risk,Confirm.risk,Affirm.risk,Mscrg.risk)
#####################LASSO preparation####################
###blinded to treatment so drop variable TRT01A
todrop<-c("TRT01A")
mrg.both<-mrg[ , !(names(mrg) %in% todrop)]
### delete NA values (LASSO requierement)
mrg.both<-na.omit(mrg.both)
#### model matrix needed for LASSO
half.matrix<-model.matrix(mrg.both$RELAPSE2year~.,data=mrg.both)
half.matrix<-na.omit(half.matrix)
#################################LASSO################################
######################################################################
##10 cross validations
cv.fit.half<-cv.glmnet(x=half.matrix,y=mrg.both$RELAPSE2year,family="binomial")
### LASSO coefficients
cv.coef.half<-coef(cv.fit.half,s="lambda.1se")
####RESULTS
### non zero coefficients lead to selected variables
cv.pf.em.half<-rownames(cv.coef.half)[as.numeric(cv.coef.half)!=0]
print(cv.pf.em.half)
}
dataset<-MSrelapse
todrop<-c("STUDYID","USUBJID","RELAPSE1year")
set.seed(1)
Define<-dataset[which(dataset$STUDYID=="109MS301"),]
Define.risk<-Define[sample(nrow(Define), nrow(Define)/2),]
Define.risk<-Define.risk[ , !(names(Define.risk) %in% todrop)]
set.seed(1)
Confirm<-dataset[which(dataset$STUDYID=="C-1801"),]
Confirm.risk<-Confirm[sample(nrow(Confirm), nrow(Confirm)/2),]
Confirm.risk<-Confirm.risk[ , !(names(Confirm.risk) %in% todrop)]
set.seed(1)
Affirm<-dataset[which(dataset$STUDYID=="C-1802"),]
Affirm.risk<-Affirm[sample(nrow(Affirm), nrow(Affirm)/2),]
Affirm.risk<-Affirm.risk[ , !(names(Affirm.risk) %in% todrop)]
set.seed(1)
Mscrg<-dataset[which(dataset$STUDYID=="NS26321"),]
Mscrg.risk<-Mscrg[sample(nrow(Mscrg), nrow(Mscrg)/2),]
Mscrg.risk<-Mscrg.risk[ , !(names(Mscrg.risk) %in% todrop)]
##all half studies together
mrg<-rbind(Define.risk,Confirm.risk,Affirm.risk,Mscrg.risk)
#####################LASSO preparation####################
###blinded to treatment so drop variable TRT01A
todrop<-c("TRT01A")
mrg.both<-mrg[ , !(names(mrg) %in% todrop)]
### delete NA values (LASSO requierement)
mrg.both<-na.omit(mrg.both)
#### model matrix needed for LASSO
half.matrix<-model.matrix(mrg.both$RELAPSE2year~.,data=mrg.both)
half.matrix<-na.omit(half.matrix)
##logistic regression based on selected variables from LASSO
model<-lrm(RELAPSE2year~EDSSBL+SFPCSBL, data=mrg.both)
a<-lrm(RELAPSE2year~rcs(EDSSBL,5)+rcs(SFPCSBL,5), data=mrg.both)
anova(a) ##rlps3yr nonlinear
b<-lrm(RELAPSE2year~rcs(EDSSBL,4)+rcs(SFPCSBL,4), data=mrg.both)
anova(b)##rlps3yr nonlinear
AIC(a)
AIC(b) ###best choice of knots is knots=4
CrossInternalRisk2year.fun=function(dataset){
#load libraries
library(glmnet)
library(Hmisc)
####################random half RCTs from studies###############################
todrop<-c("STUDYID","USUBJID","RELAPSE1year")
set.seed(1)
Define<-dataset[which(dataset$STUDYID=="109MS301"),]
Define.risk<-Define[sample(nrow(Define), nrow(Define)/2),]
Define.risk<-Define.risk[ , !(names(Define.risk) %in% todrop)]
set.seed(1)
Confirm<-dataset[which(dataset$STUDYID=="C-1801"),]
Confirm.risk<-Confirm[sample(nrow(Confirm), nrow(Confirm)/2),]
Confirm.risk<-Confirm.risk[ , !(names(Confirm.risk) %in% todrop)]
set.seed(1)
Affirm<-dataset[which(dataset$STUDYID=="C-1802"),]
Affirm.risk<-Affirm[sample(nrow(Affirm), nrow(Affirm)/2),]
Affirm.risk<-Affirm.risk[ , !(names(Affirm.risk) %in% todrop)]
set.seed(1)
Mscrg<-dataset[which(dataset$STUDYID=="NS26321"),]
Mscrg.risk<-Mscrg[sample(nrow(Mscrg), nrow(Mscrg)/2),]
Mscrg.risk<-Mscrg.risk[ , !(names(Mscrg.risk) %in% todrop)]
##all half studies together
mrg<-rbind(Define.risk,Confirm.risk,Affirm.risk,Mscrg.risk)
#####################LASSO preparation####################
###blinded to treatment so drop variable TRT01A
todrop<-c("TRT01A")
mrg.both<-mrg[ , !(names(mrg) %in% todrop)]
### delete NA values (LASSO requierement)
mrg.both<-na.omit(mrg.both)
#### model matrix needed for LASSO
half.matrix<-model.matrix(mrg.both$RELAPSE2year~.,data=mrg.both)
half.matrix<-na.omit(half.matrix)
##logistic regression based on selected variables from LASSO
model<-lrm(RELAPSE2year~EDSSBL+SFPCSBL, data=mrg.both)
##check the assumption of linearity
a<-lrm(RELAPSE2year~rcs(EDSSBL,5)+rcs(SFPCSBL,5), data=mrg.both)
anova(a) ##all linear
b<-lrm(RELAPSE2year~rcs(EDSSBL,4)+rcs(SFPCSBL,4), data=mrg.both)
anova(b)##all linear
AIC(a)
AIC(b) ###best choice of knots is knots=4
###final model (as anova does not indicate nonlinear relationship)
finalmodel<-lrm(RELAPSE2year~EDSSBL+SFPCSBL, data=mrg.both)
finalmodel
df<-finalmodel[["stats"]][["d.f."]]
events<- nrow(mrg.both[which(mrg.both$RELAPSE2year==1),])
####return back
cat("The selected variables are: EDSSBL, SFPCSBL ", fill = TRUE)
EPV<-events/df
cat("The EPV of the model is", EPV, fill=TRUE)
if (EPV>10){cat("The EPV of the model is >10, as recommended.", fill=TRUE)}
if (EPV<10){cat("The EPV of the model is <10, possibility of overfitting problem.", fill = TRUE)}
cat("The final model is:",fill=TRUE)
return(finalmodel)
}
####results of Cross Internal Risk score
CrossInternalRisk2year.fun(MSrelapse)
##### Give your path of data
library(devtools)
#install_github("htx-r/CleaningData",force=TRUE)
install_github("htx-r/RiskModelNMApredictions", force = TRUE)
library(RiskModelNMApredictions)
#library(CleaningData)
mydatapath="C:/Users/kc19o338/Desktop/HTx/data/IPD data from 6 Biogen trials"
### load data
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
adsl01<-cleanBIOGENtrials$adsl01
### Select variables that I need and recode them in numerical values (e.g. Male=1, Female=0)
MSrelapse<-numericalDataRisk.fun(adsl01)
internalRisk.fun(MSrelapse)
CrossInternalRisk.fun(MSrelapse)
###results of Internal risk score
internalRisk2year.fun(MSrelapse)
####selection of variables based on
####results of Cross Internal Risk score
CrossInternalRisk2year.fun(MSrelapse)
library(devtools)
install_github("htx-r/CleaningData",force=TRUE)
library(CleaningData)
mydatapath="C:/Users/kc19o338/Desktop/HTx/data/IPD data from 6 Biogen trials"
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
library(devtools)
install_github("htx-r/RiskModelNMApredictions", force = TRUE)
library(RiskModelNMApredictions)
mydatapath="C:/Users/kc19o338/Desktop/HTx/data/IPD data from 6 Biogen trials"
### load data
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
View(cleanBIOGENtrials)
View(cleanBIOGENtrials)
library(devtools)
install_github("htx-r/CleaningData",force=TRUE)
library(CleaningData)
mydatapath="C:/Users/kc19o338/Desktop/HTx/data/IPD data from 6 Biogen trials"
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
cleanBIOGENtrials.fun()
cleanBIOGENtrials.fun
cleanBIOGENtrials<-cleanBIOGENtrials.fun(datapath=mydatapath)
library(CleaningData)
library(devtools)
install_github("htx-r/RiskModelNMApredictions", force = TRUE)
library(RiskModelNMApredictions)
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
cleanBIOGENtrials.fun()
cleanBIOGENtrials.fun
cleanPLACEBOtrials.fun
cleanBIOGENtrials.fun
library(CleaningData)
install_github("htx-r/CleaningData",force=TRUE)
library(RiskModelNMApredictions)
library(RiskModelNMApredictions)
library(CleaningData)
library(devtools)
install_github("htx-r/CleaningData",force=TRUE)
library(CleaningData)
mydatapath="C:/Users/kc19o338/Desktop/HTx/data/IPD data from 6 Biogen trials"
### load data
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
View(cleanBIOGENtrials)
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)$adls01
### load data
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
class(cleanBIOGENtrials)
############################################################
#         Master analysis for MS NMA Prediction MODEL
############################################################
###load the github libraries
library(devtools)
install_github("htx-r/CleaningData",force=TRUE)
install_github("htx-r/RiskModelNMApredictions", force = TRUE)
library(RiskModelNMApredictions)
library(CleaningData)
###### Give your path of data
mydatapath="C:/Users/kc19o338/Desktop/HTx/data/IPD data from 6 Biogen trials"
### load data
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
adsl01<-cleanBIOGENtrials$adsl01
numericalDataRisk.fun=function(dataset){
library(car)
####recode treatment names####
dataset$TRT01A<-as.numeric(dataset$TRT01A)
dataset$TRT01A<-recode(dataset$TRT01A, "1='Avonex'; 2='Dimethyl fumarate';3='Peginterferon Beta-1a'; 4='Peginterferon Beta-1a';5='Glatiramer acetate';6='Natalizumab';7='Natalizumab + Avonex';8='Placebo';9='Avonex'")
dataset$TRT01A<-as.factor(dataset$TRT01A)
##################################HANDLING VARIABLES##############################################
##keep only needed variables
keep<-c("STUDYID","USUBJID","AGE","SEX","RACE","TRT01A","HEIGHTBL","WEIGHTBL","EDSSBL","ONSYRS","DIAGYRS",
"DOMIHAND","RLPS3YR","TRELMOS", "MCDBL","PRMSGR","REGION","T25FWABL","NHPTMBL","NHPTDHBL","NHPTNHBL",
"PASATABL","MSFCBL","GDLESBL","T2VOLBL","T1VOLBL","BVZBL","VFT100BL","VFT25BL",
"VFT125BL","SFPCSBL","SFMCSBL","VISUALBL","BRAINBL","PYRAMIBL","SENSORBL","BOWLBLBL",
"CEREBRBL","DISTWKBL","T25FWP1","NHPTMP1","NHPTDHP1","NHPTNHP1","PASATP1","T25FWPC","NHPTMPC","NHPTDHPC",
"NHPTNHPC","PASATPC","RELAPSE1year","RELAPSE2year")
MSrelapse<-dataset[,keep]
##################################HANDLING VARIABLES############################
###########################RECODE VARIABLES and make them factors############################
MSrelapse$SEX<-recode(MSrelapse$SEX, "'M'=1; 'F'=0")
MSrelapse$RACE<-recode(MSrelapse$RACE, "'WHITE'=1; 'NON-WHITE'=0")
MSrelapse$DOMIHAND<-recode(MSrelapse$DOMIHAND, "'Left'=1;'LEFT'=1;  'Right'=0; 'RIGHT'=0;" )
MSrelapse$DOMIHAND[which(MSrelapse$DOMIHAND=="")]<-NA
###MCDBL categories instead of 1, 2, 3, 4 there are  1, 2, >=3
MSrelapse$MCDBL[which(MSrelapse$MCDBL==4)]<-3
MSrelapse$MCDBL<-as.factor(MSrelapse$MCDBL)
MSrelapse$PRMSGR<-as.factor(MSrelapse$PRMSGR)
MSrelapse$REGION<-recode(MSrelapse$REGION, "'Eastern Europe'=1;'India'=2;  'North America'=3; 'ROW'=4;'Western Europe'=5 " )
###VISUALBL categories instead of 0, 1, 2, 3, 4, 5, 6 there are 0, 1, 2, >=3
MSrelapse$VISUALBL[which(MSrelapse$VISUALBL==4 | MSrelapse$VISUALBL==5 | MSrelapse$VISUALBL==6)]<-3
MSrelapse$VISUALBL<-as.factor(MSrelapse$VISUALBL)
###BRAINBL categories instead of 0, 1, 2, 3, 4 there are 0, 1, >=2
MSrelapse$BRAINBL[which(MSrelapse$BRAINBL==3 | MSrelapse$BRAINBL==4)]<-2
MSrelapse$BRAINBL<-as.factor(MSrelapse$BRAINBL)
###PYRAMIBL categories instead of 0, 1, 2, 3, 4, 5, 6 there are 0, 1, 2, >=3
MSrelapse$PYRAMIBL[which(MSrelapse$PYRAMIBL==4 | MSrelapse$PYRAMIBL==5)]<-3
MSrelapse$PYRAMIBL<-as.factor(MSrelapse$PYRAMIBL)
###SENSOR BL categories instead of 0, 1, 2, 3, 4, 5, 6 there are 0, 1, 2, >=3
MSrelapse$SENSORBL[which(MSrelapse$SENSORBL==4 | MSrelapse$SENSORBL==5 | MSrelapse$SENSORBL==6)]<-3
MSrelapse$SENSORBL<-as.factor(MSrelapse$SENSORBL)
###BOWLBLBLL categories instead of 0, 1, 2, 3, 4, 5, 6 there are 0, 1, 2, >=3
MSrelapse$BOWLBLBL[which(MSrelapse$BOWLBLBL==4 | MSrelapse$BOWLBLBL==5 | MSrelapse$BOWLBLBL==6)]<-3
MSrelapse$BOWLBLBL<-as.factor(MSrelapse$BOWLBLBL)
###CEREBRBL categories instead of 0 ,1, 2, 3, 4 there are 0, 1, >=2
MSrelapse$CEREBRBL[which(MSrelapse$CEREBRBL==3 | MSrelapse$CEREBRBL==4)]<-2
MSrelapse$CEREBRBL<-as.factor(MSrelapse$CEREBRBL)
mylevels <- c("< 100 METRES",
">= 100 METRES AND < 200 METRES",
">= 200 METRES AND < 300 METRES",
">= 300 METRES AND < 500 METRES",
">= 500 METRES")
MSrelapse$DISTWKBL<- as.numeric(factor(MSrelapse$DISTWKBL, levels=mylevels))
MSrelapse$DISTWKBL<-as.factor(MSrelapse$DISTWKBL)
#remove Sentinel study - Not included in AD data - Combination of therapies
MSrelapse<-MSrelapse[which(MSrelapse$STUDYID!="SENTINEL"),]
return(MSrelapse)
}
MSrelapse<-numericalDataRisk.fun(adsl01)
apply(MSrelapse,2,hist)
apply(MSrelapse,1,hist)
help(apply)
View(MSrelapse)
View(MSrelapse)
table(MSrelapse$SENSORBL)
table(MSrelapse$MCDBL)
table(MSrelapse$TRELMOS)
table(MSrelapse$NHPTDHBL)
table(MSrelapse$PASATABL)
summary(MSrelapse$GDLESBL)
class(MSrelapse$GDLESBL)
keep<-c("AGE","HEIGHTBL","WEIGHTBL","EDSSBL","ONSYRS","DIAGYRS",
"RLPS3YR","TRELMOS","T25FWABL","NHPTMBL","NHPTDHBL","NHPTNHBL",
"PASATABL","GDLESBL","T2VOLBL","T1VOLBL","BVZBL","VFT100BL","VFT25BL",
"VFT125BL","SFPCSBL","SFMCSBL","T25FWP1","NHPTMP1","NHPTDHP1","NHPTNHP1",
"PASATP1","T25FWPC","NHPTMPC","NHPTDHPC","NHPTNHPC","PASATPC"))
keep<-c("AGE","HEIGHTBL","WEIGHTBL","EDSSBL","ONSYRS","DIAGYRS",
"RLPS3YR","TRELMOS","T25FWABL","NHPTMBL","NHPTDHBL","NHPTNHBL",
"PASATABL","GDLESBL","T2VOLBL","T1VOLBL","BVZBL","VFT100BL","VFT25BL",
"VFT125BL","SFPCSBL","SFMCSBL","T25FWP1","NHPTMP1","NHPTDHP1","NHPTNHP1",
"PASATP1","T25FWPC","NHPTMPC","NHPTDHPC","NHPTNHPC","PASATPC")
S<-MSrelapse[,keep]
apply(S,2,hist)
hist(S$AGE)
hist(S$HEIGHTBL)
hist(S$WEIGHTBL)
hist(S$EDSSBL)
hist(S$ONSYRS)
hist(S$DIAGYRS)
hist(S$RLPS3YR)
hist(S$TRELMOS)
hist(S$T25FWABL)
hist(S$NHPTMBL)
hist(S$NHPTDHBL)
hist(S$NHPTNHBL)
hist(S$PASATABL)
hist(S$GDLESBL)
hist(S$T2VOLBL)
hist(S$T1VOLBL)
hist(S$BVZBL)
hist(S$VFT100BL)
hist(S$VFT125BL)
hist(S$VFT25BL)
hist(S$SFPCSBL)
hist(S$SFMCSBL)
hist(S$T25FWP1)
hist(S$NHPTMP1)
hist(S$NHPTDHP1)
hist(S$NHPTNHP1)
hist(S$PASATP1)
hist(S$T25FWPC)
hist(S$NHPTMPC)
hist(S$NHPTDHPC)
hist(S$NHPTNHPC)
hist(S$PASATPC)
cor(MSrelapse)
cor(S)
help("cor")
cor(S, method = "pearson")
cor(S, method = "spearman")
S<-as.data.frame(S)
cor(S)
cor(S, na.rm=TRUE)
cor(S, na.rm = TRUE)
S<-as.matrix(S)
cor(S, na.rm = TRUE)
library(Hmisc)
rcorr(S)
correlation<-rcorr(S)
View(correlation)
View(correlation)
pdf(file='CORRELATION.pdf',
bg="transparent", fg="black",
width=15, height=20))
pdf(file='CORRELATION.pdf',
bg="transparent", fg="black",
width=15, height=20)
library(devtools)
install_github("htx-r/CleaningData",force=TRUE)
install_github("htx-r/NMApredictionsRiskModel", force = TRUE)
library(NMApredictionsRiskModel)
library(CleaningData)
library(devtools)
install_github("htx-r/CleaningData",force=TRUE)
install_github("htx-r/NMApredictionsRiskModel", force = TRUE)
library(NMApredictionsRiskModel)
library(CleaningData)
